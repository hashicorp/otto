// Code generated by go-bindata.
// sources:
// data/app/dev/Vagrantfile.tpl
// DO NOT EDIT!

package compile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAppDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x41\x6b\xec\x36\x10\xbe\xef\xaf\x98\x7a\x79\xef\xe5\xc1\xc6\xdb\x86\xd2\x43\x20\x87\x52\xda\xa6\x50\xe8\x21\xa1\x97\x52\x8c\x6c\x8d\x6d\x11\x59\x23\x24\xd9\xdb\x65\xe3\xff\xde\x91\x64\xef\x66\x93\x52\x58\x58\x79\x34\xf3\xcd\xcc\x37\xdf\x68\x0b\xbf\xa2\x41\x27\x02\x4a\xa8\x8f\xf0\x47\x08\xb4\x03\x49\x60\x28\x00\x4a\x15\xbe\xd9\x6c\x37\x5b\x78\xee\x95\x07\xfe\x85\x1e\xe1\x4f\xd1\x39\x61\x42\xab\x34\x42\xf7\x3e\x16\x5a\x72\xc9\x4b\xe2\x84\x9a\xec\x80\x26\x00\xb5\x0c\x11\x22\x84\xb0\x56\xab\x46\x04\x45\x66\xef\xd1\x4d\xaa\xc1\x12\x7e\x0b\xe0\x7b\x1a\xb5\x4c\x49\x6b\x84\x5e\x18\x79\x1b\x93\xa3\x2c\xe1\x99\x60\x20\xa9\xda\x63\x84\x65\x9c\x37\xe9\x77\x30\x7a\x4c\xd9\x7e\xb4\x36\x1a\xca\xcd\x66\xb9\x2e\x1b\x32\xad\xea\x46\x87\x37\xc5\x5d\xf1\x35\x76\xf4\x9a\x4d\xaf\x1b\x80\x7c\x2a\xa7\xa1\xac\xe9\x1f\x78\x80\xa2\x17\xbe\x57\x0d\x39\xbb\xb7\x0e\x1b\xe5\xf1\x87\xef\x8b\x2b\x3f\xeb\x68\x52\x12\x1d\xdc\x5b\xe1\x84\xd6\xa8\x7d\xc2\xb4\x3b\xa0\x88\x08\x40\x6f\xe0\xce\x3e\xfb\xb1\x1e\x4d\x18\x6f\xbf\xbb\x2b\xbf\x4d\x88\x68\xe4\x86\xff\xb6\xf0\x48\x9e\x89\x31\xfa\x08\x06\xc3\x81\xdc\xcb\x55\xba\xc5\xc6\x48\x4e\x4d\xcc\x6f\xb5\x18\x8a\x1d\x28\x7b\x0f\xc5\xe9\x14\x09\xae\x94\xad\x84\x94\x0e\xbd\x87\x79\x2e\x22\xf0\xe9\x13\xd4\x9a\x9a\x17\xbe\x6e\xc5\xa8\x43\xe5\x7b\xe1\x50\x56\x2d\xe9\x58\xfd\xa7\x39\x25\x7f\xc2\x30\x5a\x10\xe0\x8f\xa6\xe1\xd9\x2d\x97\xad\xa3\x01\x68\x74\x10\x33\x29\xd3\x81\x54\x4c\x46\x20\xc7\xd4\x13\xec\xa7\xcc\xec\x55\x9d\x19\x60\x45\xff\xc2\x65\x59\x11\xfa\x72\x05\x98\xe7\x2f\x3b\x28\xd6\xc8\x62\x97\x89\x3a\xb0\x66\xb8\x87\xb3\x15\x3a\x47\xa3\x7d\x63\xc9\x7d\x30\x55\xb9\x15\x2e\x3a\x55\xfd\xb3\x11\x35\x6b\xee\xe9\xe9\x11\x44\x17\x75\xc5\x5a\x3b\x08\x27\x63\x26\x4f\xac\xc5\x10\xe2\x71\xa1\x8c\x19\xb0\x0c\x81\xa6\x51\xe8\x53\x4b\xfe\x52\xba\xf7\x7d\xb9\x44\x57\x19\xeb\x01\x82\x1b\x31\x27\xfa\x85\x46\x23\x93\x48\x61\x95\x51\xfe\xba\x51\x2d\x08\x73\xfc\x9a\x0b\x8c\x52\x67\x8a\x40\x19\x3e\xae\x11\x15\x5b\x7c\xc9\xc3\xc9\x5c\xc7\x7b\x16\xc4\x9e\x78\x37\xf6\x17\xaf\x5b\x66\x8a\xc3\x35\x91\x2d\x7f\x62\x6b\x60\xf6\xe2\x04\xff\x9f\xdb\x08\x96\x28\xe5\xc3\x47\x75\xfa\x58\x61\xe1\x7b\xd4\x3a\xca\xc4\x68\x65\x90\x49\x6d\x24\x6c\x4f\x1c\x30\xc3\xe7\xcf\x50\xb3\xce\x97\xcf\xfd\x20\x94\x29\x7d\x7f\x61\x3b\xf6\xb3\x72\xfd\x3b\x09\x09\xac\xe1\xa4\x87\xd6\x89\x2e\x2e\xb2\x87\x1e\x1d\xa6\xbe\x99\x85\x2b\x82\xcb\x0b\x25\xab\x77\xe4\x25\x8a\xf4\x12\x9d\x18\x89\x9d\x2f\x96\x57\x87\x9c\x65\x9e\xff\xb3\x82\xf3\x93\x43\x69\x78\x20\x5c\x64\x8f\x07\x3d\x20\xd4\x63\xe7\xc1\xa9\xae\x0f\xfc\x64\x1c\xd8\xfd\xaf\x62\x1a\x78\x98\x58\xb5\x63\xa4\x81\xfb\x5f\x0d\x69\xf0\x21\x91\x5e\xfc\x5d\xa2\x68\xfa\xb4\xb7\x46\x0c\x98\xf7\xf6\xe3\x8e\xdf\xc4\xcb\xfc\x64\xd8\xec\x03\x60\x4b\x4c\xea\xab\xa6\xc1\x8d\x26\x2e\x1e\xcf\xee\x85\x97\xe8\x01\x5a\xa1\x3d\x26\xb7\xb8\xdc\xe7\x15\x3f\x6f\xe2\xa2\xea\x2a\x27\xe2\xfe\xde\x69\x3b\xf9\x9f\xbd\x5b\xa2\x90\x16\xf5\x9d\xd7\xbf\x01\x00\x00\xff\xff\x11\xbc\xb7\xa6\xa8\x05\x00\x00"

func dataAppDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAppDevVagrantfileTpl,
		"data/app/dev/Vagrantfile.tpl",
	)
}

func dataAppDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataAppDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/app/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/app/dev/Vagrantfile.tpl": dataAppDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataAppDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

